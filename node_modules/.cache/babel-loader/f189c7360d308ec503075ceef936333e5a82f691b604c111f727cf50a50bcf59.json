{"ast":null,"code":"var _jsxFileName = \"/Users/jwk/Desktop/\\u1100\\u1173\\u1105\\u1175\\u11AB\\u110B\\u1161\\u1110\\u1173/React-Quiz/src/App.js\",\n  _s = $RefreshSig$();\nimport './App.css';\nimport { Route, Routes } from 'react-router-dom';\nimport Main from './pages/Main';\nimport Detail from './pages/Detail';\nimport { useEffect, useState } from 'react';\nimport Quizlist from './components/Quizlist';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [userName, setUserName] = useState('');\n  const [QuizList, setQuizList] = useState(Quizlist);\n  const quiz = [...Quizlist];\n  const [selected, setSelected] = useState(12);\n  const [quizCnt, setQuizCnt] = useState(Quizlist.length);\n  const [typeTxt, setTypeTxt] = useState('전체');\n  const ChangeEvent = data => {\n    const classValue = data.target.className;\n    const dataValue = data.target.value;\n    switch (true) {\n      case classValue.includes('name'):\n        // console.log('이름값 변경')\n        setUserName(dataValue);\n        break;\n      case classValue.includes('random'):\n        // console.log(dataValue)\n        dataValue === '1' ? setQuizList([...Quizlist].sort(() => {\n          return Math.random() - 0.5;\n        }).slice(0, selected)) : setQuizList([...Quizlist]).slice(0, selected);\n        // 0~1사이의 값을 반환 > 0.5의 평균값을 얻게 되어 -0.5~0.5값으로 랜덤 출력\n\n        break;\n      case classValue.includes('cnt'):\n        // console.log('개수 변경')\n        setSelected(dataValue);\n        break;\n      case classValue.includes('type'):\n        // console.log(dataValue);\n        // ; 안 찍으면 에러남\n        dataValue === '전체' ? setQuizList([...Quizlist].slice(0, selected)) : setQuizList([...Quizlist].filter(e => {\n          return e.type === dataValue;\n        }).slice(0, selected));\n        setTypeTxt(dataValue);\n        // Quizlist QuizList 잘 구분해서 쓰기. 가져오는것을 잘 구분해야함.\n\n        break;\n      default:\n        console.log('데이터가 없습니다.');\n    }\n  };\n  useEffect(() => {\n    setQuizList([...Quizlist].slice(0, selected));\n    setQuizCnt([...Quizlist].filter(e => {\n      return typeTxt === '전체' ? true : e.type === typeTxt;\n    }).length);\n    // console.log(QuizList)\n  }, [typeTxt, selected]);\n  //재렌더링 될 때마다 딜레이를 주고 로딩함. ,[] 추가해주면 로딩 후 한번만 실행 됨\n  // state값을 넣으면 값이 변할 때마다 re-render. > useEffect가 재 실행됨.\n  // 마지막에 실행 됨.\n  // console.log(Quizlist)\n  return /*#__PURE__*/_jsxDEV(Routes, {\n    children: [/*#__PURE__*/_jsxDEV(Route, {\n      path: \"/\",\n      element: /*#__PURE__*/_jsxDEV(Main, {\n        ChangeEvent: ChangeEvent,\n        userName: userName,\n        quiz: quiz,\n        selected: selected,\n        QuizList: QuizList,\n        quizCnt: quizCnt\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 32\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Route, {\n      path: \"/quiz\",\n      element: /*#__PURE__*/_jsxDEV(Detail, {\n        QuizList: QuizList,\n        userName: userName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 36\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"t53kCM7OogBROaX3UTd9glullO0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["Route","Routes","Main","Detail","useEffect","useState","Quizlist","jsxDEV","_jsxDEV","App","_s","userName","setUserName","QuizList","setQuizList","quiz","selected","setSelected","quizCnt","setQuizCnt","length","typeTxt","setTypeTxt","ChangeEvent","data","classValue","target","className","dataValue","value","includes","sort","Math","random","slice","filter","e","type","console","log","children","path","element","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jwk/Desktop/그린아트/React-Quiz/src/App.js"],"sourcesContent":["import './App.css';\nimport { Route, Routes } from 'react-router-dom';\nimport Main from './pages/Main';\nimport Detail from './pages/Detail';\nimport { useEffect, useState } from 'react';\nimport Quizlist from './components/Quizlist';\n\nfunction App() {\n  \n\n  const [userName, setUserName] = useState('')\n  const [QuizList, setQuizList] = useState(Quizlist)\n  const quiz = [...Quizlist]\n  const [selected, setSelected] = useState(12)\n  const [quizCnt, setQuizCnt] = useState(Quizlist.length)\n  const [typeTxt, setTypeTxt] = useState('전체')\n\n  const ChangeEvent = (data) => {\n    const classValue = data.target.className;\n    const dataValue = data.target.value;\n    switch(true){   \n      case classValue.includes('name') : \n        // console.log('이름값 변경')\n        setUserName(dataValue)\n      break;\n      case classValue.includes('random') : \n        // console.log(dataValue)\n        (dataValue === '1' ? setQuizList([...Quizlist].sort(()=>{return Math.random() - 0.5}).slice(0, selected)\n        ) : setQuizList([...Quizlist]).slice(0, selected))\n        // 0~1사이의 값을 반환 > 0.5의 평균값을 얻게 되어 -0.5~0.5값으로 랜덤 출력\n        \n      break;\n      case classValue.includes('cnt') : \n        // console.log('개수 변경')\n        setSelected(dataValue);\n      break;\n      case classValue.includes('type') : \n        // console.log(dataValue);\n        // ; 안 찍으면 에러남\n        (dataValue === '전체'\n        ? setQuizList([...Quizlist].slice(0, selected))\n        : setQuizList([...Quizlist].filter((e)=>{\n          return e.type === dataValue\n        }).slice(0, selected))\n        )\n        setTypeTxt(dataValue)\n        // Quizlist QuizList 잘 구분해서 쓰기. 가져오는것을 잘 구분해야함.\n\n      break;\n      default:\n        console.log('데이터가 없습니다.')\n    }\n  }\n  \n  useEffect(()=>{\n    setQuizList([...Quizlist].slice(0, selected));\n    setQuizCnt([...Quizlist].filter((e)=>{\n      return typeTxt === '전체' ? true : e.type === typeTxt;\n    }).length);\n    // console.log(QuizList)\n  },[typeTxt, selected])\n//재렌더링 될 때마다 딜레이를 주고 로딩함. ,[] 추가해주면 로딩 후 한번만 실행 됨\n// state값을 넣으면 값이 변할 때마다 re-render. > useEffect가 재 실행됨.\n// 마지막에 실행 됨.\n  // console.log(Quizlist)\n  return (\n    <Routes>\n      <Route path='/' element={<Main ChangeEvent={ChangeEvent} userName={userName} quiz={quiz} selected={selected} QuizList={QuizList} quizCnt={quizCnt} />} />\n      <Route path='/quiz' element={<Detail QuizList={QuizList} userName={userName} />}/>\n    </Routes>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}